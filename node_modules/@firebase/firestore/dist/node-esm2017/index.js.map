{"version":3,"file":"index.js","sources":["../../src/lite/field_value_impl.ts","../../src/api/field_path.ts","../../src/api/field_value.ts","../../src/config.ts","../../index.node.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValue } from './field_value';\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  ServerTimestampFieldValueImpl\n} from './user_data_reader';\n\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nexport function deleteField(): FieldValue {\n  return new DeleteFieldValueImpl('deleteField');\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nexport function serverTimestamp(): FieldValue {\n  return new ServerTimestampFieldValueImpl('serverTimestamp');\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nexport function arrayUnion(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayUnionFieldValueImpl('arrayUnion', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function arrayRemove(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function increment(n: number): FieldValue {\n  return new NumericIncrementFieldValueImpl('increment', n);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\nimport { FieldPath as ExpFieldPath } from '../../exp/index';\nimport { FieldPath as InternalFieldPath } from '../model/path';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath implements PublicFieldPath, Compat<ExpFieldPath> {\n  readonly _delegate: ExpFieldPath;\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    this._delegate = new ExpFieldPath(...fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    other = getModularInstance(other);\n\n    if (!(other instanceof ExpFieldPath)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValue as PublicFieldValue } from '@firebase/firestore-types';\nimport { Compat } from '@firebase/util';\n\nimport {\n  arrayRemove,\n  arrayUnion,\n  deleteField,\n  FieldValue as FieldValue1,\n  increment,\n  serverTimestamp\n} from '../../exp/index';\n\nexport class FieldValue implements PublicFieldValue, Compat<FieldValue1> {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  constructor(readonly _delegate: FieldValue1) {}\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Component, ComponentType, Provider } from '@firebase/component';\n\nimport {\n  CACHE_SIZE_UNLIMITED,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  Transaction,\n  WriteBatch,\n  setLogLevel,\n  Blob,\n  FieldPath,\n  GeoPoint,\n  Timestamp,\n  FieldValue\n} from '../export';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { name, version } from './package.json';\nimport { Firestore, IndexedDbPersistenceProvider } from './src/api/database';\nimport { configureForFirebase } from './src/config';\nimport { FirebaseFirestore as ExpFirebaseFirestore } from './src/exp/database';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore Node build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) =>\n      new Firestore(\n        app,\n        new ExpFirebaseFirestore(app, auth),\n        new IndexedDbPersistenceProvider()\n      )\n  );\n  instance.registerVersion(name, version, 'node');\n}\n\nregisterFirestore(firebase);\n"],"names":["ExpFieldPath","InternalFieldPath","ExpFirebaseFirestore"],"mappings":"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"}