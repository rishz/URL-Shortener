{"version":3,"file":"bundle.js","sources":["../../src/api/bundle.ts","../../index.bundle.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoadBundleTask as ApiLoadBundleTask,\n  LoadBundleTaskProgress\n} from '@firebase/firestore-types';\n\nimport { ensureFirestoreConfigured } from '../../src/exp/database';\nimport { Query as ExpQuery } from '../../src/exp/reference';\nimport {\n  firestoreClientGetNamedQuery,\n  firestoreClientLoadBundle\n} from '../core/firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { Deferred } from '../util/promise';\n\nimport { Query, Firestore } from './database';\nimport { PartialObserver } from './observer';\n\nexport class LoadBundleTask\n  implements ApiLoadBundleTask, PromiseLike<LoadBundleTaskProgress> {\n  private _progressObserver: PartialObserver<LoadBundleTaskProgress> = {};\n  private _taskCompletionResolver = new Deferred<LoadBundleTaskProgress>();\n\n  private _lastProgress: LoadBundleTaskProgress = {\n    taskState: 'Running',\n    totalBytes: 0,\n    totalDocuments: 0,\n    bytesLoaded: 0,\n    documentsLoaded: 0\n  };\n\n  onProgress(\n    next?: (progress: LoadBundleTaskProgress) => unknown,\n    error?: (err: Error) => unknown,\n    complete?: () => void\n  ): void {\n    this._progressObserver = {\n      next,\n      error,\n      complete\n    };\n  }\n\n  catch<R>(\n    onRejected: (a: Error) => R | PromiseLike<R>\n  ): Promise<R | LoadBundleTaskProgress> {\n    return this._taskCompletionResolver.promise.catch(onRejected);\n  }\n\n  then<T, R>(\n    onFulfilled?: (a: LoadBundleTaskProgress) => T | PromiseLike<T>,\n    onRejected?: (a: Error) => R | PromiseLike<R>\n  ): Promise<T | R> {\n    return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\n  }\n\n  /**\n   * Notifies all observers that bundle loading has completed, with a provided\n   * `LoadBundleTaskProgress` object.\n   */\n  _completeWith(progress: LoadBundleTaskProgress): void {\n    debugAssert(\n      progress.taskState === 'Success',\n      'Task is not completed with Success.'\n    );\n    this._updateProgress(progress);\n    if (this._progressObserver.complete) {\n      this._progressObserver.complete();\n    }\n\n    this._taskCompletionResolver.resolve(progress);\n  }\n\n  /**\n   * Notifies all observers that bundle loading has failed, with a provided\n   * `Error` as the reason.\n   */\n  _failWith(error: FirestoreError): void {\n    this._lastProgress.taskState = 'Error';\n\n    if (this._progressObserver.next) {\n      this._progressObserver.next(this._lastProgress);\n    }\n\n    if (this._progressObserver.error) {\n      this._progressObserver.error(error);\n    }\n\n    this._taskCompletionResolver.reject(error);\n  }\n\n  /**\n   * Notifies a progress update of loading a bundle.\n   * @param progress - The new progress.\n   */\n  _updateProgress(progress: LoadBundleTaskProgress): void {\n    debugAssert(\n      this._lastProgress.taskState === 'Running',\n      'Cannot update progress on a completed or failed task'\n    );\n\n    this._lastProgress = progress;\n    if (this._progressObserver.next) {\n      this._progressObserver.next(progress);\n    }\n  }\n}\n\nexport function loadBundle(\n  db: Firestore,\n  bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string\n): LoadBundleTask {\n  const resultTask = new LoadBundleTask();\n  firestoreClientLoadBundle(\n    ensureFirestoreConfigured(db._delegate),\n    db._databaseId,\n    bundleData,\n    resultTask\n  );\n  return resultTask;\n}\n\nexport function namedQuery(db: Firestore, name: string): Promise<Query | null> {\n  return firestoreClientGetNamedQuery(\n    ensureFirestoreConfigured(db._delegate),\n    name\n  ).then(namedQuery => {\n    if (!namedQuery) {\n      return null;\n    }\n\n    return new Query(db, new ExpQuery(db._delegate, null, namedQuery.query));\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Firestore, loadBundle, namedQuery } from './export';\n\n/**\n * Prototype patches bundle loading to Firestore.\n */\nexport function registerBundle(instance: typeof Firestore): void {\n  instance.prototype.loadBundle = function (\n    this: Firestore,\n    data: ArrayBuffer | ReadableStream<Uint8Array> | string\n  ) {\n    return loadBundle(this, data);\n  };\n  instance.prototype.namedQuery = function (\n    this: Firestore,\n    queryName: string\n  ) {\n    return namedQuery(this, queryName);\n  };\n}\n\nregisterBundle(Firestore);\n"],"names":["Deferred","firestoreClientLoadBundle","ensureFirestoreConfigured","firestoreClientGetNamedQuery","Query","ExpQuery","Firestore"],"mappings":"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"}