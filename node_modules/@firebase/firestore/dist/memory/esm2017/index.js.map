{"version":3,"file":"index.js","sources":["../../../src/config.ts","../../../index.memory.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Component, ComponentType, Provider } from '@firebase/component';\n\nimport {\n  CACHE_SIZE_UNLIMITED,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  Transaction,\n  WriteBatch,\n  setLogLevel,\n  Blob,\n  FieldPath,\n  GeoPoint,\n  Timestamp,\n  FieldValue\n} from '../export';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport {\n  Firestore,\n  MemoryPersistenceProvider,\n  ExpFirebaseFirestore\n} from './export';\nimport { name, version } from './package.json';\nimport { configureForFirebase } from './src/config';\n\nimport './register-module';\n\n/**\n * Registers the memory-only Firestore build with the components framework.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) =>\n      new Firestore(\n        app,\n        new ExpFirebaseFirestore(app, auth),\n        new MemoryPersistenceProvider()\n      )\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n"],"names":["Firestore","GeoPoint","Timestamp","Blob","Transaction","WriteBatch","DocumentReference","DocumentSnapshot","Query","QueryDocumentSnapshot","QuerySnapshot","CollectionReference","FieldPath","FieldValue","setLogLevel","CACHE_SIZE_UNLIMITED","ExpFirebaseFirestore","MemoryPersistenceProvider"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAyCA,MAAM,kBAAkB,GAAG;eACzBA,EAAS;cACTC,EAAQ;eACRC,CAAS;UACTC,EAAI;iBACJC,EAAW;gBACXC,EAAU;uBACVC,EAAiB;sBACjBC,EAAgB;WAChBC,EAAK;2BACLC,EAAqB;mBACrBC,EAAa;yBACbC,EAAmB;eACnBC,EAAS;gBACTC,EAAU;iBACVC,EAAW;0BACXC,EAAoB;CACrB,CAAC;AAEF;;;;;;;SAOgB,oBAAoB,CAClC,QAA2B,EAC3B,gBAGc;IAEb,QAA+B,CAAC,QAAQ,CAAC,iBAAiB,CACzD,IAAI,SAAS,CACX,WAAW,EACX,SAAS;QACP,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,YAAY,EAAG,CAAC;QACzD,OAAO,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;KACtE,wBAEF,CAAC,eAAe,mBAAM,kBAAkB,EAAG,CAC7C,CAAC;AACJ;;ACpFA;;;;;;;;;;;;;;;;AA8BA;;;SAGgB,iBAAiB,CAAC,QAA2B;IAC3D,oBAAoB,CAClB,QAAQ,EACR,CAAC,GAAG,EAAE,IAAI,KACR,IAAIf,EAAS,CACX,GAAG,EACH,IAAIgB,EAAoB,CAAC,GAAG,EAAE,IAAI,CAAC,EACnC,IAAIC,EAAyB,EAAE,CAChC,CACJ,CAAC;IACF,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC1C,CAAC;AAED,iBAAiB,CAAC,QAAQ,CAAC;;;;"}