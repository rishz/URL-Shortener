{"version":3,"sources":["../src/app/firebase_app.ts"],"names":["createFirebaseNamespace","LocalPromise","Promise","DEFAULT_ENTRY_NAME","FirebaseAppImpl","options","name","firebase_","isDeleted_","services_","name_","options_","hasCredential","hasServiceAccount","deprecatedKey","console","log","Object","keys","INTERNAL","factories","forEach","serviceName","factoryName","useAsService","getService","bind","resolve","checkDestroyed_","then","removeApp","services","serviceKey","instanceKey","push","all","map","service","delete","instanceString","instanceSpecifier","firebaseService","extendApp","props","error","prototype","apps_","appHooks","namespace","undefined","app","callAppHooks","getToken","createService","serviceProperties","appHook","allowMultipleInstances","serviceNamespace","appArg","GoogPromise","defineProperty","get","result","eventName","useService","code","args","appErrors","create","errors"],"mappings":"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","file":"firebase_app.js","sourcesContent":["import {patchProperty, deepCopy, deepExtend} from './deep_copy';\nimport {createSubscribe} from './subscribe';\nimport {AppHook} from 'firebase';\nimport {ErrorFactory} from './errors';\nimport {local} from './shared_promise';\n\nlet LocalPromise = local.Promise as typeof Promise;\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nclass FirebaseAppImpl implements FirebaseApp {\n  private options_: FirebaseOptions;\n  private name_: string;\n  private isDeleted_ = false;\n  private services_: {[name: string]:\n                          {[instance: string]: FirebaseService}} = {};\n  public INTERNAL: FirebaseAppInternals;\n\n  constructor(options: FirebaseOptions,\n              name: string,\n              private firebase_: FirebaseNamespace) {\n    this.name_ = name;\n    this.options_ = deepCopy<FirebaseOptions>(options);\n\n    const hasCredential = ('credential' in this.options_);\n    const hasServiceAccount = ('serviceAccount' in this.options_);\n    if (hasCredential || hasServiceAccount) {\n      const deprecatedKey = hasServiceAccount ? 'serviceAccount' : 'credential';\n      if (typeof console !== 'undefined') {\n        console.log(\n          `The '${deprecatedKey}' property specified in the first argument ` +\n          `to initializeApp() is deprecated and will be removed in the next ` +\n          `major version. You should instead use the 'firebase-admin' ` +\n          `package. See https://firebase.google.com/docs/admin/setup for ` +\n          `details on how to get started.`\n        );\n      }\n    }\n\n    Object.keys(firebase_.INTERNAL.factories).forEach((serviceName) => {\n      // Ignore virtual services\n      let factoryName = firebase_.INTERNAL.useAsService(this, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      // Defer calling createService until service is accessed.\n      let getService = this.getService.bind(this, factoryName);\n      patchProperty(this, serviceName, getService);\n    });\n  }\n\n  get name(): string {\n    this.checkDestroyed_();\n    return this.name_;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed_();\n    return this.options_;\n  }\n\n  delete(): Promise<void> {\n    return new LocalPromise((resolve) => {\n      this.checkDestroyed_();\n      resolve();\n    })\n      .then(() => {\n        this.firebase_.INTERNAL.removeApp(this.name_);\n        let services: FirebaseService[] = [];\n        Object.keys(this.services_).forEach((serviceKey) => {\n          Object.keys(this.services_[serviceKey]).forEach((instanceKey) => {\n            services.push(this.services_[serviceKey][instanceKey]);\n          });\n        });\n        return LocalPromise.all(services.map((service) => {\n          return service.INTERNAL!.delete();\n        }));\n      })\n      .then((): void => {\n        this.isDeleted_ = true;\n        this.services_ = {};\n      });\n  }\n\n  /**\n   * Return the service instance associated with this app (creating it\n   * on demand).\n   */\n  private getService(name: string, instanceString?: string): FirebaseService\n      |null {\n    this.checkDestroyed_();\n\n    if (typeof this.services_[name] === 'undefined') {\n      this.services_[name] = {};\n    }\n\n    let instanceSpecifier = instanceString || DEFAULT_ENTRY_NAME;\n    if (typeof this.services_[name]![instanceSpecifier] === 'undefined') {\n      let firebaseService = this.firebase_.INTERNAL.factories[name](\n          this, this.extendApp.bind(this), instanceString);\n      this.services_[name]![instanceSpecifier] = firebaseService;\n      return firebaseService;\n    } else {\n      return this.services_[name]![instanceSpecifier] as FirebaseService | null;\n    }\n  }\n\n  /**\n   * Callback function used to extend an App instance at the time\n   * of service instance creation.\n   */\n  private extendApp(props: {[name: string]: any}): void {\n    deepExtend(this, props);\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed_(): void {\n    if (this.isDeleted_) {\n      error('app-deleted', {'name': this.name_});\n    }\n  }\n};\n\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\nFirebaseAppImpl.prototype.name &&\n  FirebaseAppImpl.prototype.options ||\n  FirebaseAppImpl.prototype.delete ||\n  console.log(\"dc\");\n\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace(): FirebaseNamespace {\n  let apps_: {[name: string]: FirebaseApp} = {};\n  let factories: {[service: string]: FirebaseServiceFactory} = {};\n  let appHooks: {[service: string]: AppHook} = {};\n\n  // A namespace is a plain JavaScript Object.\n  let namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    '__esModule': true,\n    'initializeApp': initializeApp,\n    'app': app as any,\n    'apps': null as any,\n    'Promise': LocalPromise,\n    'SDK_VERSION': '3.9.0',\n    'INTERNAL': {\n      'registerService': registerService,\n      'createFirebaseNamespace': createFirebaseNamespace,\n      'extendNamespace': extendNamespace,\n      'createSubscribe': createSubscribe,\n      'ErrorFactory': ErrorFactory,\n      'removeApp': removeApp,\n      'factories': factories,\n      'useAsService': useAsService,\n      'Promise': local.GoogPromise as typeof Promise,\n      'deepExtend': deepExtend,\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  patchProperty(namespace, 'default', namespace);\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    let app = apps_[name];\n    callAppHooks(app, 'delete');\n    delete apps_[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || DEFAULT_ENTRY_NAME;\n    let result = apps_[name];\n    if (result === undefined) {\n      error('no-app', {'name': name});\n    }\n    return result;\n  }\n\n  patchProperty(app, 'App', FirebaseAppImpl);\n\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeApp(options: FirebaseOptions, name?: string): FirebaseApp {\n    if (name === undefined) {\n      name = DEFAULT_ENTRY_NAME;\n    } else {\n      if (typeof name !== 'string' || name === '') {\n        error('bad-app-name', {'name': name + ''});\n      }\n    }\n    if (apps_[name!] !== undefined) {\n      error('duplicate-app', {'name': name});\n    }\n    let app = new FirebaseAppImpl(options, name!,\n                                  ((namespace as any) as FirebaseNamespace));\n    apps_[name!] = app;\n    callAppHooks(app, 'create');\n\n    // Ensure that getUid, getToken, addAuthListener and removeAuthListener\n    // have a default implementation if no service has patched the App\n    // (i.e., Auth is not present).\n    if (app.INTERNAL == undefined || app.INTERNAL.getToken == undefined) {\n      deepExtend(app, {\n        INTERNAL: {\n          'getUid': () => null,\n          'getToken': () => LocalPromise.resolve(null),\n          'addAuthTokenListener': () => { /*_*/ },\n          'removeAuthTokenListener': () => { /*_*/ },\n        }\n      });\n    }\n    return app;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps_).map((name) => apps_[name]);\n  }\n\n  /*\n   * Register a Firebase Service.\n   *\n   * firebase.INTERNAL.registerService()\n   *\n   * TODO: Implement serviceProperties.\n   */\n  function registerService(\n      name: string, \n      createService: FirebaseServiceFactory,\n      serviceProperties?: {[prop: string]: any}, \n      appHook?: AppHook,\n      allowMultipleInstances?: boolean):\n      FirebaseServiceNamespace<FirebaseService> {\n    if (factories[name]) {\n      error('duplicate-service', {'name': name});\n    }\n    if (!!allowMultipleInstances) {\n      // Check if the service allows multiple instances per app\n      factories[name] = createService;\n    } else {\n      // If not, always return the same instance when a service is instantiated\n      // with an instanceString different than the default.\n      factories[name] =\n          (app: FirebaseApp, extendApp?: (props: {[prop: string]: any}) => void,\n           instanceString?: string) => {\n            // If a new instance is requested for a service that does not allow\n            // multiple instances, return the default instance\n            return createService(app, extendApp, DEFAULT_ENTRY_NAME);\n          };\n    }\n    if (appHook) {\n      appHooks[name] = appHook;\n    }\n\n    let serviceNamespace: FirebaseServiceNamespace<FirebaseService>;\n\n    // The Service namespace is an accessor function ...\n    serviceNamespace = (appArg?: FirebaseApp) => {\n      if (appArg === undefined) {\n        appArg = app();\n      }\n      if (typeof(appArg as any)[name] !== 'function') {\n        // Invalid argument.\n        // This happens in the following case: firebase.storage('gs:/')\n        error('invalid-app-argument', {'name': name});\n      }\n      // Forward service instance lookup to the FirebaseApp.\n      return (appArg as any)[name]();\n    };\n\n    // ... and a container for service-level properties.\n    if (serviceProperties !== undefined) {\n      deepExtend(serviceNamespace, serviceProperties);\n    }\n\n    // Monkey-patch the serviceNamespace onto the firebase namespace\n    (namespace as any)[name] = serviceNamespace;\n\n    return serviceNamespace;\n  }\n\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props: {[prop: string]: any}): void {\n    deepExtend(namespace, props);\n  }\n\n  function callAppHooks(app: FirebaseApp, eventName: string) {\n    Object.keys(factories).forEach((serviceName) => {\n      // Ignore virtual services\n      let factoryName = useAsService(app, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      if (appHooks[factoryName]) {\n        appHooks[factoryName](eventName, app);\n      }\n    });\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    let useService = name;\n    let options = app.options;\n    if (name === 'auth' &&\n        (options['serviceAccount'] || options['credential'])) {\n      useService = 'serverAuth';\n      // Set in firebase-node.js.\n      if (!('serverAuth' in factories)) {\n        // serivce accounts for serverAuth are not usable in a non node\n        // environment.\n        // TODO: This should be removed when serverAuth is deprecated.\n        error('sa-not-supported');\n      }\n    }\n    return useService;\n  }\n\n  return (namespace as any) as FirebaseNamespace;\n}\n\ntype AppError = 'no-app'|'bad-app-name'|'duplicate-app'|'app-deleted'|\n    'duplicate-service'|'sa-not-supported'|'invalid-app-argument';\n\nfunction error(code: AppError, args?: {[name: string]: any}) {\n  throw appErrors.create(code, args);\n}\n\n// TypeScript does not support non-string indexes!\n// let errors: {[code: AppError: string} = {\nlet errors: {[code: string]: string} = {\n  'no-app': 'No Firebase App \\'{$name}\\' has been created - ' +\n      'call Firebase App.initializeApp()',\n  'bad-app-name': 'Illegal App name: \\'{$name}',\n  'duplicate-app': 'Firebase App named \\'{$name}\\' already exists',\n  'app-deleted': 'Firebase App named \\'{$name}\\' already deleted',\n  'duplicate-service': 'Firebase service named \\'{$name}\\' already registered',\n  'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\n      'account is only allowed in a Node.js environment. On client ' +\n      'devices, you should instead initialize the SDK with an api key and ' +\n      'auth domain',\n  'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\n      'Firebase App instance.'\n};\n\nlet appErrors = new ErrorFactory<AppError>('app', 'Firebase', errors);"]}