{
  "_args": [
    [
      "promise-polyfill@https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
      "/home/ashish/Desktop/Github/URL-Shortener/node_modules/firebase"
    ]
  ],
  "_from": "promise-polyfill@>=6.0.2 <7.0.0",
  "_id": "promise-polyfill@6.0.2",
  "_inCache": true,
  "_location": "/firebase/promise-polyfill",
  "_phantomChildren": {},
  "_requested": {
    "name": "promise-polyfill",
    "raw": "promise-polyfill@https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/firebase"
  ],
  "_resolved": "https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
  "_shasum": "d9c86d3dc4dc2df9016e88946defd69b49b41162",
  "_shrinkwrap": null,
  "_spec": "promise-polyfill@https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.0.2.tgz",
  "_where": "/home/ashish/Desktop/Github/URL-Shortener/node_modules/firebase",
  "author": {
    "name": "Taylor Hakes"
  },
  "bugs": {
    "url": "https://github.com/taylorhakes/promise-polyfill/issues"
  },
  "dependencies": {},
  "description": "Lightweight promise polyfill. A+ compliant",
  "devDependencies": {
    "eslint": "^2.4.0",
    "karma": "^0.13.19",
    "karma-browserify": "^4.4.2",
    "karma-chrome-launcher": "^0.2.2",
    "karma-mocha": "^0.2.1",
    "mocha": "^2.3.4",
    "promises-aplus-tests": "*",
    "sinon": "^1.17.2",
    "uglify-js": "^2.6.2"
  },
  "homepage": "https://github.com/taylorhakes/promise-polyfill",
  "keywords": [
    "ES6",
    "promise",
    "promise-polyfill",
    "promises-aplus"
  ],
  "license": "MIT",
  "main": "promise.js",
  "name": "promise-polyfill",
  "optionalDependencies": {},
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n# Promise Polyfill\n[![travis][travis-image]][travis-url]\n\n[travis-image]: https://img.shields.io/travis/taylorhakes/promise-polyfill.svg?style=flat\n[travis-url]: https://travis-ci.org/taylorhakes/promise-polyfill\n\n\nLightweight ES6 Promise polyfill for the browser and node. Adheres closely to the spec. It is a perfect polyfill IE, Firefox or any other browser that does not support native promises.\n\nFor API information about Promises, please check out this article [HTML5Rocks article](http://www.html5rocks.com/en/tutorials/es6/promises/).\n\nIt is extremely lightweight. ***< 1kb Gzipped***\n\n## Browser Support\nIE8+, Chrome, Firefox, IOS 4+, Safari 5+, Opera\n\n### NPM Use\n```\nnpm install promise-polyfill --save-exact\n```\n### Bower Use\n```\nbower install promise-polyfill\n```\n\n## Downloads\n\n- [Promise](https://raw.github.com/taylorhakes/promise-polyfill/master/promise.js)\n- [Promise-min](https://raw.github.com/taylorhakes/promise-polyfill/master/promise.min.js)\n\n## Simple use\n```js\nvar prom = new Promise(function(resolve, reject) {\n  // do a thing, possibly async, thenâ€¦\n\n  if (/* everything turned out fine */) {\n    resolve(\"Stuff worked!\");\n  }  else {\n    reject(new Error(\"It broke\"));\n  }\n});\n\nprom.then(function(result) {\n  // Do something when async done\n});\n```\n\n## Deprecations\n- `Promise._setImmediateFn(<immediateFn>)` has been deprecated. Use `Promise._immediateFn = <immediateFn>;` instead.\n- `Promise._setUnhandledRejectionFn(<rejectionFn>)` has been deprecated. Use `Promise._unhandledRejectionFn = <rejectionFn>` instead.\nThese functions will be removed in the next major version.\n\n## Performance\nBy default promise-polyfill uses `setImmediate`, but falls back to `setTimeout` for executing asynchronously. If a browser does not support `setImmediate` (IE/Edge are the only browsers with setImmediate), you may see performance issues.\nUse a `setImmediate` polyfill to fix this issue. [setAsap](https://github.com/taylorhakes/setAsap) or [setImmediate](https://github.com/YuzuJS/setImmediate) work well.\n\nIf you polyfill `window.setImmediate` or use `Promise._immediateFn = yourImmediateFn` it will be used instead of `window.setTimeout`\n```\nnpm install setasap --save\n```\n```js\nvar Promise = require('promise-polyfill');\nvar setAsap = require('setasap');\nPromise._immediateFn = setAsap;\n```\n\n## Unhandled Rejections\npromise-polyfill will warn you about possibly unhandled rejections. It will show a console warning if a Promise is rejected, but no `.catch` is used. You can turn off this behavior by setting `Promise._setUnhandledRejectionFn(<rejectError>)`.\nIf you would like to disable unhandled rejections. Use a noop like below.\n```js\nPromise._unhandledRejectionFn = function(rejectError) {};\n```\n\n\n## Testing\n```\nnpm install\nnpm test\n```\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://taylorhakes@github.com/taylorhakes/promise-polyfill.git"
  },
  "scripts": {
    "build": "uglifyjs --compress --support-ie8 --mangle -o promise.min.js -- promise.js ",
    "test": "eslint promise.js && mocha && karma start --single-run"
  },
  "version": "6.0.2"
}
