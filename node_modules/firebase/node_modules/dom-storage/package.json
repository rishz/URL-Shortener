{
  "_args": [
    [
      "dom-storage@https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
      "/home/ashish/Desktop/Github/URL-Shortener/node_modules/firebase"
    ]
  ],
  "_from": "dom-storage@>=2.0.2 <3.0.0",
  "_id": "dom-storage@2.0.2",
  "_inCache": true,
  "_location": "/firebase/dom-storage",
  "_phantomChildren": {},
  "_requested": {
    "name": "dom-storage",
    "raw": "dom-storage@https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/firebase"
  ],
  "_resolved": "https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
  "_shasum": "ed17cbf68abd10e0aef8182713e297c5e4b500b0",
  "_shrinkwrap": null,
  "_spec": "dom-storage@https://registry.npmjs.org/dom-storage/-/dom-storage-2.0.2.tgz",
  "_where": "/home/ashish/Desktop/Github/URL-Shortener/node_modules/firebase",
  "author": {
    "email": "coolaj86@gmail.com",
    "name": "AJ ONeal",
    "url": "http://coolaj86.info"
  },
  "bugs": {
    "url": "https://github.com/coolaj86/node-dom-storage/issues"
  },
  "dependencies": {},
  "description": "W3C DOM Storage (localStorage and sessionStorage) for Node.JS",
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/coolaj86/node-dom-storage#readme",
  "license": "Apache2",
  "main": "lib/index.js",
  "name": "dom-storage",
  "optionalDependencies": {},
  "readme": "sessionStorage & localStorage for NodeJS\n===\n\nAn inefficient, but as W3C-compliant as possible using only pure JavaScript, `DOMStorage` implementation.\n\nPurpose\n----\n\nThis is meant for the purpose of being able to run unit-tests and such for browser-y modules in node.\n\nUsage\n----\n\n```javascript\nvar Storage = require('dom-storage')\n\n    // in-file, doesn't call `String(val)` on values (default)\n  , localStorage = new Storage('./db.json', { strict: false, ws: '  ' })\n\n    // in-memory, does call `String(val)` on values (i.e. `{}` becomes `'[object Object]'`\n  , sessionStorage = new Storage(null, { strict: true })\n\n  , myValue = { foo: 'bar', baz: 'quux' }\n  ;\n\nlocalStorage.setItem('myKey', myValue);\nmyValue = localStorage.getItem('myKey');\n\n// use JSON to stringify / parse when using strict w3c compliance\nsessionStorage.setItem('myKey', JSON.stringify(myValue));\nmyValue = JSON.parse(localStorage.getItem('myKey'));\n```\n\nAPI\n---\n\n  * getItem(key)\n  * setItem(key, value)\n  * removeItem(key)\n  * clear()\n  * key(n)\n  * length\n\n### Options\n\n  * strict - whether to stringify strictly as text `[Object object]` or as json `{ foo: bar }`.\n  * ws - the whitespace to use saving json to disk. Defaults to `'  '`.\n\nTests\n---\n\n```javascript\n0 === localStorage.length;\nnull === localStorage.getItem('doesn't exist');\nundefined === localStorage['doesn't exist'];\n\nlocalStorage.setItem('myItem');\n\"undefined\" === localStorage.getItem('myItem');\n1 === localStorage.length;\n\nlocalStorage.setItem('myItem', 0);\n\"0\" === localStorage.getItem('myItem');\n\nlocalStorage.removeItem('myItem', 0);\n0 === localStorage.length;\n\nlocalStorage.clear();\n0 === localStorage.length;\n```\n\nNotes\n---\n\n  * db is read in synchronously\n  * No callback when db is saved\n  * Doesn't not emit `Storage` events (not sure how to do)\n\nLicense\n-------\n\n* [Apache2](http://www.apache.org/licenses/LICENSE-2.0)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/node-dom-storage.git"
  },
  "version": "2.0.2"
}
